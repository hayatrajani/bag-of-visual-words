// @file    test_data.hpp
// @author  Ignacio Vizzo   [ivizzo@uni-bonn.de]
// @author  Hayat Rajani    [hayat.rajani@uni-bonn.de]
//
// Original Copyright (c) 2020 Ignacio Vizzo, all rights reserved

#ifndef TEST_DATA_HPP_
#define TEST_DATA_HPP_

#include <vector>

#include <opencv2/core/mat.hpp>

#include "bow/core/descriptor.hpp"

//  00, 00, 00, 00, 00, 00, 00, 00, 00, 00;
//  00, 00, 00, 00, 00, 00, 00, 00, 00, 00;
//  00, 00, 00, 00, 00, 00, 00, 00, 00, 00;
//  00, 00, 00, 00, 00, 00, 00, 00, 00, 00;
//  00, 00, 00, 00, 00, 00, 00, 00, 00, 00;
//  20, 20, 20, 20, 20, 20, 20, 20, 20, 20;
//  20, 20, 20, 20, 20, 20, 20, 20, 20, 20;
//  20, 20, 20, 20, 20, 20, 20, 20, 20, 20;
//  20, 20, 20, 20, 20, 20, 20, 20, 20, 20;
//  20, 20, 20, 20, 20, 20, 20, 20, 20, 20;
//  40, 40, 40, 40, 40, 40, 40, 40, 40, 40;
//  40, 40, 40, 40, 40, 40, 40, 40, 40, 40;
//  40, 40, 40, 40, 40, 40, 40, 40, 40, 40;
//  40, 40, 40, 40, 40, 40, 40, 40, 40, 40;
//  40, 40, 40, 40, 40, 40, 40, 40, 40, 40;
//  60, 60, 60, 60, 60, 60, 60, 60, 60, 60;
//  60, 60, 60, 60, 60, 60, 60, 60, 60, 60;
//  60, 60, 60, 60, 60, 60, 60, 60, 60, 60;
//  60, 60, 60, 60, 60, 60, 60, 60, 60, 60;
//  60, 60, 60, 60, 60, 60, 60, 60, 60, 60;
//  80, 80, 80, 80, 80, 80, 80, 80, 80, 80;
//  80, 80, 80, 80, 80, 80, 80, 80, 80, 80;
//  80, 80, 80, 80, 80, 80, 80, 80, 80, 80;
//  80, 80, 80, 80, 80, 80, 80, 80, 80, 80;
//  80, 80, 80, 80, 80, 80, 80, 80, 80, 80
std::vector<bow::FeatureDescriptor> getDummyData(const std::string& path = "");

//  00, 00, 00, 00, 00, 00, 00, 00, 00, 00;
//  00, 00, 00, 00, 00, 00, 00, 00, 00, 00;
//  00, 00, 00, 00, 00, 00, 00, 00, 00, 00;
//  00, 00, 00, 00, 00, 00, 00, 00, 00, 00;
//  00, 00, 00, 00, 00, 00, 00, 00, 00, 00;
//  20, 20, 20, 20, 20, 20, 20, 20, 20, 20;
//  20, 20, 20, 20, 20, 20, 20, 20, 20, 20;
//  20, 20, 20, 20, 20, 20, 20, 20, 20, 20;
//  20, 20, 20, 20, 20, 20, 20, 20, 20, 20;
//  20, 20, 20, 20, 20, 20, 20, 20, 20, 20;
//  40, 40, 40, 40, 40, 40, 40, 40, 40, 40;
//  40, 40, 40, 40, 40, 40, 40, 40, 40, 40;
//  40, 40, 40, 40, 40, 40, 40, 40, 40, 40;
//  40, 40, 40, 40, 40, 40, 40, 40, 40, 40;
//  40, 40, 40, 40, 40, 40, 40, 40, 40, 40;
//  60, 60, 60, 60, 60, 60, 60, 60, 60, 60;
//  60, 60, 60, 60, 60, 60, 60, 60, 60, 60;
//  60, 60, 60, 60, 60, 60, 60, 60, 60, 60;
//  60, 60, 60, 60, 60, 60, 60, 60, 60, 60;
//  60, 60, 60, 60, 60, 60, 60, 60, 60, 60;
//  80, 80, 80, 80, 80, 80, 80, 80, 80, 80;
//  80, 80, 80, 80, 80, 80, 80, 80, 80, 80;
//  80, 80, 80, 80, 80, 80, 80, 80, 80, 80;
//  80, 80, 80, 80, 80, 80, 80, 80, 80, 80;
//  80, 80, 80, 80, 80, 80, 80, 80, 80, 80
cv::Mat getAllFeatures();

//  05,  05,  05,  05,  05,  05,  05,  05,  05,  05;
//  15,  15,  15,  15,  15,  15,  15,  15,  15,  15;
// 115, 115, 115, 115, 115, 115, 115, 115, 115, 115;
cv::Mat get3Features();

//  00, 00, 00, 00, 00, 00, 00, 00, 00, 00;
//  20, 20, 20, 20, 20, 20, 20, 20, 20, 20;
//  40, 40, 40, 40, 40, 40, 40, 40, 40, 40;
//  60, 60, 60, 60, 60, 60, 60, 60, 60, 60;
//  80, 80, 80, 80, 80, 80, 80, 80, 80, 80
cv::Mat get5Kmeans();

// With values [0,2,4,6,8], the 3 kMeans are [0, 3, 7]
//              ^  ^  ^
//              0  3  7
//  00, 00, 00, 00, 00, 00, 00, 00, 00, 00;
//  30, 30, 30, 30, 30, 30, 30, 30, 30, 30;
//  70, 70, 70, 70, 70, 70, 70, 70, 70, 70
cv::Mat get3Kmeans();

int getMaxFeatures();
int getNumColumns();

#endif  // TEST_DATA_HPP_